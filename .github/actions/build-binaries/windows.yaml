name: "Build Windows Binary Artifacts"
description: "Build Windows specific pyinstaller binary artifacts"
inputs:
  package_name: # TODO: NC - We probably don't need this
    description: "The name of the package to build and test"
    required: true
  architecture:
    description: "Architecture to set the correct binary path and extension"
    required: true
  version:
    description: "The release version to use for this artifact"

runs:
  using: "composite"
  steps:
    - name: Build Executable
      run: |
        poetry run poe package_windows

    - name: Zip binaries
      shell: bash
      run: |
        cd dist/algokit/
        if [ -n "${{ inputs.version }}" ]; then
          tar -zcf ../artifacts/algokit-${{ inputs.version }}-Windows-${{ inputs.architecture }}.tar.gz *
        else
          tar -zcf ../artifacts/algokit-Windows-${{ inputs.architecture }}.tar.gz *
        fi
        cd ../..

    - name: Build msix
      if: ${{ inputs.operating_system == 'Windows' }}
      shell: pwsh
      run: "./scripts/create-winget-package.ps1"
      env:
        RELEASE_VERSION: ${{ env.RELEASE_VERSION }}

    # TODO: NC - Codesign winget package

    - name: Create winget artifact
      if: ${{ inputs.operating_system == 'Windows' }}
      uses: actions/upload-artifact@v4
      with:
        name: winget-algokit-${{ inputs.operating_system }}-${{ inputs.architecture }}.msix
        path: ./dist/winget-algokit.msix
