name: "Build Windows Binary Artifacts"
description: "Build Windows specific pyinstaller binary artifacts"
inputs:
  package_name:
    description: "The name of the package to build and test"
    required: true
  architecture:
    description: "Architecture to set the correct binary path and extension"
    required: true
  version:
    description: "The release version to use for this artifact"

runs:
  using: "composite"
  steps:
    - name: Build Executable
      shell: bash
      run: |
        poetry run poe package_windows

    # {distribution}-{version}(-{build tag})?-{python tag}-{abi tag}-{platform tag}.whl.
    # algokit-{version NO v}-(platform)-(architecture).tar.gz

    # package_name = algokit-0.1.0-windows_x64

    # algokit-0.1.0-windows_x64.tar.gz
    # algokit-0.1.0-macos_x64-winget.msix
    # algokit-0.1.0-linux_x64.tar.gz
    # algokit-0.1.0-macos_x64.tar.gz

    - name: Zip binary artifact
      shell: bash
      run: |
        cd dist/algokit/
        tar -zcf ../artifacts/${{ inputs.package_name }}.tar.gz *
        cd ../..

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.package_name }}.tar.gz
        path: ${{ github.workspace }}/dist/artifacts/${{ inputs.package_name }}.tar.gz

    - name: Build msix
      shell: pwsh
      run: "./scripts/create-winget-package.ps1"

    # TODO: NC - Codesign winget package

    - name: Upload winget artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.package_name }}-winget.msix
        path: ${{ github.workspace }}/dist/artifacts/${{ inputs.package_name }}-winget.msix
